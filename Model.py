import gc; gc.collect(); import matplotlib,sys
matplotlib.use('Agg'); sys.dont_write_bytecode = True
import visual,read_data,profiles,diaries,time,expo,cPickle,math
import numpy as np
from os.path import isfile,isdir,join
from os import listdir,getcwd,remove,makedirs
from multiprocessing import Process as prll
from diaries import comm2cells,selection,select_diary,get_speeds
from visual import images_for_video,get_projection
from read_data import read_road_network,network_stops

label,chim_label,run_label,dom,chimere_exp,static,procc,traj_images,building_stock,conc_period,allow_steps_prf,allow_steps_dia,allow_steps_con,allow_steps_exp,write_asc_dia,path_to_conc,path_for_output, \
path_to_plots,calc_stats_dia,calc_stats_exp,plot_stats_exp,exp_start_date,exp_end_date,stats_start_date,stats_end_date=read_data.read_definition_file()

start_time=time.clock(); cal_st=1; input_exp_fl_exist=0; period_stats=[stats_start_date,stats_end_date]; period_exp=[exp_start_date,exp_end_date]; list_deps=[75,77,78,91,92,93,94,95]

if not isfile(getcwd()+'/data/BTX_TD_POP1B_2009.dat'): read_data.read_demographics('BTX_TD_POP1B_2009.xls',list_deps)
st=open(getcwd()+'/data/BTX_TD_POP1B_2009.dat','rb'); pop=cPickle.load(st); st.close(); sample=dict(); cor={75:0,92:1,93:1,94:1,77:2,78:2,91:2,95:2}; pop_per_reg=[0,0,0]

if int(building_stock)>2008: run_label+='_BLD'+str(building_stock)


# 95633 is a adventure park and there is no correspondence with the population map, it is skipped in profiles    
nb_individuals=250000

out_dir=path_for_output+'/ind_'+str(nb_individuals)+'_'+run_label
conc_dir=join('domains/'+dom+'/conc/',chim_label)
samp_dir='samples/ind_'+str(nb_individuals)+'_'+label

if not isfile(samp_dir+'/profiles.dat'):

   popReal=np.sum(pop.values())
   pop_pc=[]
   tmp=sorted(pop.keys())

   for c in tmp :
      pop_pc.append(np.sum(pop[c])/popReal)
      sample[c]=0

   printout=10000;cnt=0
   for ind in range(nb_individuals):
      if ind == printout:
          print str(printout) +' out of ' +str(nb_individuals)
          printout +=10000
      id_selection=profiles.selection(pop_pc,0)
      if id_selection > len(tmp) :print cnt,id_selection ; cnt+=1
      c=tmp[id_selection]
      sample[c] +=1
      curr_dep=int(int(c)/1000.)
      pop_per_reg[cor[curr_dep]]+=1

else:
   for c in pop.keys():
       sample[c]=0
   pp=cPickle.load(open(samp_dir+'/profiles.dat','r'))
   for ind in pp.keys():
       c=pp[ind][0]
       curr_dep=int(int(c)/1000.)
       sample[c]+=1
       pop_per_reg[cor[curr_dep]]+=1


                                          
print ''; print 'executing model for label: '+run_label; print ''; print 'label for pre-exposure data (profiles/diaries): '+label; print ''
print 'your sample has been calculated to '+str(nb_individuals)+' individuals'; print ''; print 'your simulation will use the building stock database of the year '+str(building_stock); print ''
print 'your simulation will use the I/O database of the year '+str(conc_period); print ''; print 'your sample consists of:'
print 'Paris:',str(round(100.*pop_per_reg[0]/nb_individuals,1))+'%','(18.6%)'; print 'Petit Couronne',str(round(100.*pop_per_reg[1]/nb_individuals,1))+'%','(37.3%)'
print 'Grand Couronne',str(round(100.*pop_per_reg[2]/nb_individuals,1))+'%','(44.1%)'; print ''
out_dir=path_for_output+'/ind_'+str(nb_individuals)+'_'+run_label; conc_dir=join('domains/'+dom+'/conc/',chim_label); samp_dir='samples/ind_'+str(nb_individuals)+'_'+label
age=dict(); grid_coords=dict(); pp=dict(); dr=dict(); data_diaries=dict()

if allow_steps_dia==1 or allow_steps_exp==1 or calc_stats_exp==1:
   try: st=open('domains/'+dom+'/grid_polygons.dat','rb'); grid_polyg=cPickle.load(st); st.close()
   except: print 'the file domains/'+str(dom)+'/grid_polygons.dat was not found.' ; print 'This file is generated by the concentrations pre-processor. Deactivate everything else and re-run.'; sys.exit(1)

print '----------------------------------------'
print '------------PERSONAL PROFILES-----------'
print '----------------------------------------'; print ''

if allow_steps_prf==0 and isfile(samp_dir+'/profiles.dat'):

   print 'Personal profiles already generated...'
   
   # in statistics of exposure i need the pp dictionary to link exp to certain population groups  
   if allow_steps_dia==1 or allow_steps_exp==1 or calc_stats_dia==1 or calc_stats_exp==1: 
       try: print 'Reading personal profiles from the profile.dat file...'; pp=cPickle.load(open(samp_dir+'/profiles.dat','rb'))
       except: print 'error reading '+samp_dir+'/profiles.dat'; sys.exit(1)

elif allow_steps_prf==1:

   print 'generating personal profiles for your individuals...'; print ''
   raw_data = [f for f in listdir(getcwd()+'/data') if isfile(join(getcwd()+'/data',f))]
   
   data_AGEB=read_data.read_age_build()
   
   for index_f,f in enumerate([fl for fl in raw_data if fl[len(fl)-3:len(fl)]=='xls' and fl[0:3]=='BTX']):  
       ind=f[7:11] # e.g. POP1, POP5, NAV1
       if ind=='PRINC1': ind=f[7:13] # PRINC1
       #elif ind=='PRINC': ind=f[7:14] # PRINC26, PRINC30M
       if f[len(f)-3:len(f)]=='xls' and not isfile(getcwd()+'/data/'+f[0:len(f)-4]+'.dat'): exec("data_%s=read_data.read_demographics(f,list_deps)" %ind)       

       print 'Loaded '+ f +' INSEE file...'; st=open(getcwd()+'/data/'+f[0:len(f)-4]+'.dat','rb'); exec("data_%s=cPickle.load(st)" %ind); st.close()

   # Create the personal profiles of the individuals modelled
   #1: home commune, 2: gender, 3: age group, 4: activity, 5: type of contract, 6: place of work, 7: commune of transportation, 8: transportation means, 9: house age group, 10: office age group 
   print 'please wait...'; #nb_individuals=1500000; samp_dir='samples/ind_'+str(nb_individuals)+'_'+label    
   pp=profiles.strati_sampling(data_POP1,data_POP5,data_ACT2,nb_individuals,sample,samp_dir)              
   pp=profiles.workplace(data_NAV1,data_DET_,pp)
   pp=profiles.going_to(data_NAV1,data_DET_,data_DTR_,pp)
   pp=profiles.transport(data_NAV2,pp)

   #!!!!!!!!!!!!!!!!!!!!!!!!!!COMMENTED BY MVAL because missing BUILDING_AGE file!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   pp=profiles.houseage(data_AGEB,pp); pp=profiles.officeage(pp)
   make_file=profiles.create_profile_file(pp,0,samp_dir)
   #!!!!!!!!!!!!!!!!!!!!!!!!!!COMMENTED BY MVAL because missing BUILDING_AGE file!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   visual.plot_profiles(pp,samp_dir,building_stock)
   nb_individuals=len(pp)
   
print ''; print '----------------------------------------'
print '----------------DIARIES-----------------'
print '----------------------------------------'; print ''

if allow_steps_dia==0: print 'diaries not requested...'; plt_stats=0; ind_wday=dict(); ind_wend=dict()
else:

   print 'generating diaries for your individuals...'; cal_st=0; data_diaries=read_data.read_diaries(label); stops=network_stops(); nb_individuals=len(pp)
      
   # read the coordinates of the grid cells
   try: st=open('domains/'+str(dom)+'/COORDS_'+str(dom)+'.dat','rb'); grid_coords=cPickle.load(st); st.close()
   except: 
       print 'the file domains/'+str(dom)+'/COORDS_'+str(dom)+'.dat was not found.' 
       print 'This file is generated by the concentrations pre-processor. Please run this module whithout activating the diary statistics pre-processor.'; sys.exit(1)

   dx,dy=expo.get_grid_dims(grid_coords) # get the dimensions of the domain
    
   # create a correspondence dictionary of commune and grid cell           
   if not isfile('domains/'+dom+'/comm2cells.dat'): 
      print 'generating correspondance between the grid cells and the commune centroids...'
      print 'the file comm2cells.dat will be compiled for '+str(nb_individuals)+' people. keep in mind that if this number increases in a future run the file has to be recompiled.'

      f=open('data/pop_Idf.exp','rb'); pop=cPickle.load(f); f.close(); f=open('data/pop2com.exp','rb'); pop2com=cPickle.load(f); f.close()      
      c2c=read_data.cells2com(dom); communes=[i for i in pop2com.keys()]; comm_procc=expo.split_for_multi(procc,communes); threads=[]; print '0% completed.'
            
      for indx,coms in enumerate(comm_procc): p=prll(target=comm2cells,args=[dx,dom,grid_polyg,nb_individuals,pop2com,pop,coms,indx,c2c]); threads.append(p)        
      for thread in threads: thread.start()
      for thread in threads: thread.join()
      
      print 'finalizing...please wait...' # merge the chunks
      for indx in range(len(comm_procc)):
          f=open('domains/'+dom+'/comm2cells_'+str(indx)+'.dat','rb'); exec('crs%s=cPickle.load(f)' %(indx)); f.close(); remove('domains/'+dom+'/comm2cells_'+str(indx)+'.dat')
          if indx>0: exec('crs0.update(crs%s)' %(indx)); exec('crs%s.clear()' %(indx))
      
      f=open('domains/'+dom+'/comm2cells.dat','wb'); cPickle.dump(crs0,f,-1); f.close(); crs0.clear()
   else: print 'the comm2cells.dat file is found in the domains directory.'
   
   
   
   print 'caching data...'; st=open('domains/'+dom+'/comm2cells.dat','rb'); corresp=cPickle.load(st); st.close(); threads=[]
   if corresp[75120].shape[0]*4+10<nb_individuals: 
      print 'the file comm2cells.dat found contains '+str(corresp[75120].shape[0])+' individuals. You have selected '+str(nb_individuals)
      print 'delete the previous file and re-run the diaries pre-processor.'; sys.exit(0)

   # get a list of roads in each cell along with its flux and speed
   try: st=open('domains/'+dom+'/speeds2grid.dat','rb'); speeds2grid=cPickle.load(st); st.close()     
   except: print ''; print 'generating vector form of the road network...'; roads=read_road_network(); print 'Road network is read';speeds2grid=get_speeds(roads,grid_polyg,dom)
                                 
   for X in [0,1]: p=prll(target=select_diary,args=[stops,speeds2grid,data_diaries,pp,X,samp_dir,grid_coords,dom,corresp,grid_polyg,dx,dy,write_asc_dia,static]); threads.append(p)
   for thread in threads: thread.start()
   for thread in threads: thread.join()
   
   if calc_stats_dia==1: st=open(samp_dir+'/diaries_wday.dat','rb'); ind_wday=cPickle.load(st); diaries.get_statistics(ind_wday,data_diaries,1,0,samp_dir,pp) 

   if traj_images==1: # plot the movements
      res=int(math.sqrt((grid_polyg[1][0]).area)*100); proj=get_projection(dx,dy,grid_coords,res)            
      st=open(samp_dir+'/patches.dat','rb'); lines=cPickle.load(st); st.close(); images_for_video(lines,proj,samp_dir,procc)
         
if cal_st==1 and calc_stats_dia==1: # calculates average statistics but only for weekdays
   print 'caching data for statistics calculation...' 
   try: st=samp_dir+'/diaries_wday.dat'; ind_wday=cPickle.load(open(st,'rb')); st=samp_dir+'/diaries_wend.dat'; ind_wend=cPickle.load(open(st,'rb'))
   except: print 'cannot load diaries_wday.dat or diaries_wend.dat. activate the diaries pre-processor and re-run.'   
   try: st=open(getcwd()+'/data/diaries_input_'+label+'.dat','rb'); data_diaries=cPickle.load(st); st.close()
   except: print 'the file '+getcwd()+'/data/diaries_input_'+label+'.dat is missing.'; sys.exit(1)   
   diaries.get_statistics(ind_wday,data_diaries,1,0,samp_dir,pp); diaries.get_statistics(ind_wend,data_diaries,0,1,samp_dir,pp)
   
data_diaries.clear()

print ''; print '----------------------------------------'
print '-------------CONCENTRATIONS-------------'
print '----------------------------------------'; print ''

if allow_steps_con==1: print 'proccesing CHIMERE concentration fields...'; grid_coords=read_data.read_conc(path_to_conc,dom,chim_label)
else: print 'the proccesing of CHIMERE output is not requested.'
   
print ''; print '----------------------------------------'
print '----------------EXPOSURE----------------'
print '----------------------------------------'; print ''

if allow_steps_dia==0 and allow_steps_exp==1 and isfile(samp_dir+'/input_expo_wday.dat'):
   print 'WARNING: The file '+samp_dir+'/input_expo_wday.dat was found but diaries are already compiled in a previous run.'
   print 'Make sure that the diary related files are updated for your exposure calculation.'; print ''		

if allow_steps_exp==1 or calc_stats_exp==1:
   if not isfile('domains/'+dom+'/idf_cells.dat') or not isfile('domains/'+dom+'/deps_cells.dat'): expo.find_idf_cells(grid_polyg,dom)
   st=open('domains/'+dom+'/idf_cells.dat','rb'); idf_cells=cPickle.load(st); st.close() 
   
if allow_steps_exp==1:
   if not isdir(path_for_output): makedirs(path_for_output) 
   if isfile(samp_dir+'/diaries_wday.dat') and isfile(samp_dir+'/diaries_wend.dat'): expo.exposure(conc_dir,out_dir,samp_dir,dom,period_exp,procc,idf_cells,building_stock,conc_period,chimere_exp,static)
   else: print 'some of the files needed for the calculation are missing (diaries_wday.dat,diaries_wend.dat). Please activate the diaries pre-processor.'; sys.exit(0)
else: print 'exposure calculation is not requested.'

if calc_stats_exp==1: print ''; print 'calculating exposure statistics...'; expo.get_statistics(conc_dir,out_dir,samp_dir,dom,period_stats,procc,idf_cells,path_to_conc,building_stock,chim_label,static)
if plot_stats_exp==1: visual.plot_stats_expo(samp_dir,out_dir,path_to_plots,dom,period_stats,procc,path_to_conc,building_stock,chim_label,static,run_label)
 
elapsed = (time.clock() - start_time)/60. ; print ''; print 'model executed successfully.'; print ''; print 'execution time:', round(elapsed,2), 'minutes'
